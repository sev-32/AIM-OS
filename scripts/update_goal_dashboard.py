#!/usr/bin/env python
"""Generate goals/GOAL_DASHBOARD.md from goals/GOAL_TREE.yaml and optional KPI metrics."""

from __future__ import annotations

import json
from pathlib import Path
from typing import Any, Dict

import yaml

ROOT = Path(__file__).resolve().parent.parent
GOAL_TREE = ROOT / "goals" / "GOAL_TREE.yaml"
KPI_METRICS = ROOT / "goals" / "KPI_METRICS.json"
OUTPUT = ROOT / "goals" / "GOAL_DASHBOARD.md"


def load_goal_tree() -> Dict[str, Any]:
    data = yaml.safe_load(GOAL_TREE.read_text(encoding="utf-8"))
    return data


def load_metrics() -> Dict[str, Any]:
    if KPI_METRICS.exists():
        return json.loads(KPI_METRICS.read_text(encoding="utf-8"))
    return {}


def format_progress(metric_id: str, metrics: Dict[str, Any]) -> str:
    value = metrics.get(metric_id)
    if value is None:
        return "-"
    if isinstance(value, (int, float)):
        return f"{value}"
    return str(value)


def generate_dashboard(goal_tree: Dict[str, Any], metrics: Dict[str, Any]) -> str:
    lines = ["# Goal Dashboard", ""]
    lines.append(f"North Star: **{goal_tree['north_star']}**")
    lines.append("")
    lines.append("| Objective | Owner | Target | Key Result | Target | Latest |")
    lines.append("|-----------|-------|--------|------------|--------|--------|")
    for obj in goal_tree.get("objectives", []):
        obj_name = obj["name"]
        owner = obj.get("owner", "-")
        target_date = obj.get("target_date", "-")
        for kr in obj.get("key_results", []):
            kr_name = kr["metric"]
            target = kr.get("target", "-")
            latest = format_progress(kr["id"], metrics)
            lines.append(f"| {obj_name} | {owner} | {target_date} | {kr_name} | {target} | {latest} |")
    lines.append("")
    lines.append("_Generated by scripts/update_goal_dashboard.py_")
    return "\n".join(lines)


def main() -> None:
    goal_tree = load_goal_tree()
    metrics = load_metrics()
    dashboard = generate_dashboard(goal_tree, metrics)
    OUTPUT.write_text(dashboard, encoding="utf-8")


if __name__ == "__main__":
    main()
